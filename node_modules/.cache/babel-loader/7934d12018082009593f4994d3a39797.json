{"ast":null,"code":"var _jsxFileName = \"/Users/mohammedalam/Documents/RIT/Mornin/src/components/Forecast/forecast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Conditions from '../Conditions/Conditions';\nimport classes from './Forecast.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Forecast = () => {\n  _s();\n\n  let [responseObj, setResponseObj] = useState({});\n  let [city, setCity] = useState('');\n  let [unit, setUnit] = useState('imperial');\n  const uriEncodedCity = encodeURIComponent(city);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isPageLoaded, setIsPageLoaded] = useState(false); //this helps\n\n  function getForecast(e) {\n    const https = require('https');\n\n    https.get(\"https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-bdfm\", {\n      headers: {\n        \"x-api-key\": 'SThAc9Dfpb3OJ47mVg3RP3Q9qJfAOE9F5TvwZcMs'\n      }\n    }, resp => {\n      resp.on('data', chunk => {\n        console.log(\"Receiving Data\");\n      });\n      resp.on('end', () => {\n        console.log(\"Finished receiving data\");\n      });\n    }).on(\"error\", err => {\n      console.log(\"Error: \" + err.message);\n    }); // // weather data fetch function will go here\n    // const options = {\n    //     method: 'GET',\n    //     headers: {\n    //         'X-RapidAPI-Host': 'community-open-weather-map.p.rapidapi.com',\n    //         'X-RapidAPI-Key': 'fb978a9957msh0b56e3055da8ae7p111c46jsnfa747495b5bc'\n    //         // 'X-RapidAPI-Key': 'SThAc9Dfpb3OJ47mVg3RP3Q9qJfAOE9F5TvwZcMs'\n    //     }\n    // // };\n    // let url = `https://community-open-weather-map.p.rapidapi.com/weather?units=${unit}&q=${uriEncodedCity}`;\n    // // let url = `https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-bdfm`;\n    // fetch(url, options)\n    //     .then(response => response.json())\n    //     .then(response => {\n    //         console.log(response)\n    //         setResponseObj(response)\n    //     })\n    // e.preventDefault();\n  }\n\n  function changeColors() {\n    var main;\n\n    if (responseObj.weather[0].main === \"Clouds\") {\n      main = \"Clouds\";\n      let appHeaders = document.getElementsByClassName(\"App-header\");\n\n      for (let i = 0; i < appHeaders.length; i++) {\n        appHeaders[i].style.backgroundColor = \"#163294\";\n      }\n\n      let appFooters = document.getElementsByTagName(\"footer\");\n\n      for (let i = 0; i < appFooters.length; i++) {\n        appFooters[i].style.backgroundColor = \"#411F97\";\n        appFooters[i].style.color = \"white\";\n      }\n\n      console.log(\"Yolo\");\n    }\n  } // useEffect(()=>{\n  //     getForecast()\n  // })\n\n\n  return (\n    /*#__PURE__*/\n    // JSX code will go here\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your local Weather\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: getForecast,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter City\",\n          maxLength: \"50\",\n          className: classes.textInput,\n          value: city,\n          onChange: e => setCity(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: classes.Radio,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: \"units\",\n            checked: unit === \"imperial\",\n            value: \"imperial\",\n            onChange: e => setUnit(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 21\n          }, this), \"Fahrenheit\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: classes.Radio,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: \"units\",\n            checked: unit === \"metric\",\n            value: \"metric\",\n            onChange: e => setUnit(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 21\n          }, this), \"Celcius\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: classes.Button,\n          type: \"submit\",\n          children: \"Get Forecast\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Conditions, {\n        responseObj: responseObj\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_s(Forecast, \"udemy9ti4pyqkiKKAlW71vSgrIQ=\");\n\n_c = Forecast;\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/mohammedalam/Documents/RIT/Mornin/src/components/Forecast/forecast.js"],"names":["React","useEffect","useState","Conditions","classes","Forecast","responseObj","setResponseObj","city","setCity","unit","setUnit","uriEncodedCity","encodeURIComponent","isLoaded","setIsLoaded","isPageLoaded","setIsPageLoaded","getForecast","e","https","require","get","headers","resp","on","chunk","console","log","err","message","changeColors","main","weather","appHeaders","document","getElementsByClassName","i","length","style","backgroundColor","appFooters","getElementsByTagName","color","textInput","target","value","Radio","Button"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Conditions from '../Conditions/Conditions';\nimport classes from './Forecast.module.css';\n\nconst Forecast = () => {\n    let [responseObj, setResponseObj] = useState({});\n    let [city, setCity] = useState('');\n    let [unit, setUnit] = useState('imperial');\n    const uriEncodedCity = encodeURIComponent(city);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [isPageLoaded, setIsPageLoaded] = useState(false); //this helps\n\n    function getForecast(e) {\n        const https = require('https');\n        https.get(\n        \"https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-bdfm\",\n        { headers: { \"x-api-key\": 'SThAc9Dfpb3OJ47mVg3RP3Q9qJfAOE9F5TvwZcMs'}\n        },\n        (resp) => {\n            resp.on('data', (chunk) => {\n            console.log(\"Receiving Data\");\n            });\n            resp.on('end', () => {\n            console.log(\"Finished receiving data\");\n            });\n        }).on(\"error\", (err) => {\n            console.log(\"Error: \" + err.message);\n        });\n        // // weather data fetch function will go here\n        // const options = {\n        //     method: 'GET',\n        //     headers: {\n        //         'X-RapidAPI-Host': 'community-open-weather-map.p.rapidapi.com',\n        //         'X-RapidAPI-Key': 'fb978a9957msh0b56e3055da8ae7p111c46jsnfa747495b5bc'\n        //         // 'X-RapidAPI-Key': 'SThAc9Dfpb3OJ47mVg3RP3Q9qJfAOE9F5TvwZcMs'\n        //     }\n        // // };\n\n        // let url = `https://community-open-weather-map.p.rapidapi.com/weather?units=${unit}&q=${uriEncodedCity}`;\n        // // let url = `https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-bdfm`;\n        // fetch(url, options)\n        //     .then(response => response.json())\n        //     .then(response => {\n        //         console.log(response)\n        //         setResponseObj(response)\n        //     })\n\n        // e.preventDefault();\n        \n    }\n\n    function changeColors() {\n        var main;\n        if (responseObj.weather[0].main === \"Clouds\") {\n            main = \"Clouds\"\n            let appHeaders = document.getElementsByClassName(\"App-header\")\n            for (let i = 0; i < appHeaders.length; i++) {\n                appHeaders[i].style.backgroundColor=\"#163294\";\n            }\n    \n            let appFooters = document.getElementsByTagName(\"footer\")\n            for (let i = 0; i < appFooters.length; i++) {\n                appFooters[i].style.backgroundColor = \"#411F97\";\n                appFooters[i].style.color=\"white\";\n            }\n    \n            console.log(\"Yolo\")\n        }\n    }\n\n    // useEffect(()=>{\n    //     getForecast()\n    // })\n\n    return (\n        // JSX code will go here\n        <div>\n            <h2>Your local Weather</h2>\n            <form onSubmit={getForecast}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Enter City\"\n                    maxLength=\"50\"\n                    className={classes.textInput}\n                    value={city}\n                    onChange={(e) => setCity(e.target.value)}\n                    />\n                <label className={classes.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"imperial\"}\n                        value=\"imperial\"\n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Fahrenheit\n                </label>\n                <label className={classes.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"metric\"}\n                        value=\"metric\"\n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Celcius\n                </label>\n                <button className={classes.Button} type=\"submit\">Get Forecast</button>\n            </form>\n            <Conditions \n                responseObj={responseObj}\n            />\n        </div>\n    )\n}\n\nexport default Forecast;"]},"metadata":{},"sourceType":"module"}