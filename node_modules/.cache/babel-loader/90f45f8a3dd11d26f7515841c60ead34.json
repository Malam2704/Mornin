{"ast":null,"code":"var _jsxFileName = \"/Users/mohammedalam/Documents/SWEN 344/client-ma3655/weather_app/src/components/Forecast/forecast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Conditions from '../Conditions/Conditions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Forecast = () => {\n  _s();\n\n  let [responseObj, setResponseObj] = useState({});\n  let [city, setCity] = useState('');\n  let [unit, setUnit] = useState('imperial');\n  const uriEncodedCity = encodeURIComponent(city);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isPageLoaded, setIsPageLoaded] = useState(false); //this helps\n\n  function getForecast() {\n    // weather data fetch function will go here\n    const options = {\n      method: 'GET',\n      headers: {\n        'X-RapidAPI-Host': 'community-open-weather-map.p.rapidapi.com',\n        'X-RapidAPI-Key': 'fb978a9957msh0b56e3055da8ae7p111c46jsnfa747495b5bc'\n      }\n    };\n    fetch(`https://community-open-weather-map.p.rapidapi.com/weather?units=${unit}&q=${uriEncodedCity}`, options).then(response => response.json()).then(response => {\n      setResponseObj(response);\n    });\n    e.preventDefault();\n  }\n\n  function changeColors() {\n    var main;\n\n    if (responseObj.weather[0].main === \"Clouds\") {\n      main = \"Clouds\";\n      let appHeaders = document.getElementsByClassName(\"App-header\");\n\n      for (let i = 0; i < appHeaders.length; i++) {\n        appHeaders[i].style.backgroundColor = \"#163294\";\n      }\n\n      let appFooters = document.getElementsByTagName(\"footer\");\n\n      for (let i = 0; i < appFooters.length; i++) {\n        appFooters[i].style.backgroundColor = \"#411F97\";\n        appFooters[i].style.color = \"white\";\n      }\n\n      console.log(\"Yolo\");\n    }\n  } // useEffect(()=>{\n  //     getForecast()\n  // })\n\n\n  return (\n    /*#__PURE__*/\n    // JSX code will go here\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your local Weather\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: getForecast,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter City\",\n          maxLength: \"50\",\n          value: city,\n          onChange: e => setCity(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: \"units\",\n            checked: unit === \"imperial\",\n            value: \"imperial\",\n            onChange: e => setUnit(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 21\n          }, this), \"Fahrenheit\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: \"units\",\n            checked: unit === \"metric\",\n            value: \"metric\",\n            onChange: e => setUnit(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 21\n          }, this), \"Celcius\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Get Forecast\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Conditions, {\n        responseObj: responseObj\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_s(Forecast, \"udemy9ti4pyqkiKKAlW71vSgrIQ=\");\n\n_c = Forecast;\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/mohammedalam/Documents/SWEN 344/client-ma3655/weather_app/src/components/Forecast/forecast.js"],"names":["React","useEffect","useState","Conditions","Forecast","responseObj","setResponseObj","city","setCity","unit","setUnit","uriEncodedCity","encodeURIComponent","isLoaded","setIsLoaded","isPageLoaded","setIsPageLoaded","getForecast","options","method","headers","fetch","then","response","json","e","preventDefault","changeColors","main","weather","appHeaders","document","getElementsByClassName","i","length","style","backgroundColor","appFooters","getElementsByTagName","color","console","log","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Conditions from '../Conditions/Conditions';\n\nconst Forecast = () => {\n    let [responseObj, setResponseObj] = useState({});\n    let [city, setCity] = useState('');\n    let [unit, setUnit] = useState('imperial');\n    const uriEncodedCity = encodeURIComponent(city);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [isPageLoaded, setIsPageLoaded] = useState(false); //this helps\n\n    function getForecast() {\n        // weather data fetch function will go here\n        const options = {\n            method: 'GET',\n            headers: {\n                'X-RapidAPI-Host': 'community-open-weather-map.p.rapidapi.com',\n                'X-RapidAPI-Key': 'fb978a9957msh0b56e3055da8ae7p111c46jsnfa747495b5bc'\n            }\n        };\n\n        fetch(`https://community-open-weather-map.p.rapidapi.com/weather?units=${unit}&q=${uriEncodedCity}`, options)\n            .then(response => response.json())\n            .then(response => {\n                setResponseObj(response)\n            })\n\n            e.preventDefault();\n        \n    }\n\n    function changeColors() {\n        var main;\n        if (responseObj.weather[0].main === \"Clouds\") {\n            main = \"Clouds\"\n            let appHeaders = document.getElementsByClassName(\"App-header\")\n            for (let i = 0; i < appHeaders.length; i++) {\n                appHeaders[i].style.backgroundColor=\"#163294\";\n            }\n    \n            let appFooters = document.getElementsByTagName(\"footer\")\n            for (let i = 0; i < appFooters.length; i++) {\n                appFooters[i].style.backgroundColor = \"#411F97\";\n                appFooters[i].style.color=\"white\";\n            }\n    \n            console.log(\"Yolo\")\n        }\n    }\n\n    // useEffect(()=>{\n    //     getForecast()\n    // })\n\n    return (\n        // JSX code will go here\n        <div>\n            <h2>Your local Weather</h2>\n            <form onSubmit={getForecast}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Enter City\"\n                    maxLength=\"50\"\n                    value={city}\n                    onChange={(e) => setCity(e.target.value)}\n                    />\n                <label>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"imperial\"}\n                        value=\"imperial\"\n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Fahrenheit\n                </label>\n                <label>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"metric\"}\n                        value=\"metric\"\n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Celcius\n                </label>\n                <button type=\"submit\">Get Forecast</button>\n            </form>\n            <Conditions \n                responseObj={responseObj}\n            />\n        </div>\n    )\n}\n\nexport default Forecast;"]},"metadata":{},"sourceType":"module"}